{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","props","super","this","state","db","err","results","componentDidMount","me","Promise","all","initSqlJs","fetch","then","res","a","SQLite","dbStorage","Database","Uint8Array","arrayBuffer","setTimeout","search","setState","catch","query","sql","exec","e","renderResult","columns","values","map","columnName","row","value","render","className","onChange","target","defaultValue","toString","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"8cAIe,MAAMA,UAAYC,IAAMC,UAErCC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CAAEC,GAAI,KAAMC,IAAK,KAAMC,QAAS,MAG/CC,oBAAqB,IAAD,OAKlB,MAAMC,EAAKN,KACXO,QAAQC,IAAI,CAACC,MAAaC,MAAM,qBAAqBC,KAArD,uCAA0D,WAAMC,GAAN,mBAAAC,EAAA,6DAClDC,EAASF,EAAI,GAAIG,EAAYH,EAAI,GADiB,KAEzCE,EAAOE,SAFkC,KAErBC,WAFqB,SAEJF,EAAUG,cAFN,uCAElDhB,EAFkD,eAIxDiB,WAAW,IAAM,EAAKC,OAAO,UAE7Bd,EAAGe,SAAS,CAACnB,GAAIA,IANuC,4CAA1D,uDAOGoB,MAAMnB,IACPG,EAAGe,SAAS,CAAClB,UAKjBiB,OAAOG,GACL,IAAInB,EAAU,KAAMD,EAAM,KAC1B,MAAMqB,EAAM,kEACoCD,EADpC,0BAEuBA,EAFvB,uBAIoBA,EAJpB,4BAKyBA,EALzB,8BAM2BA,EAN3B,sBAOmBA,EAPnB,2BAQwBA,EARxB,gCAS6BA,EAT7B,0BAUuBA,EAVvB,8BAW2BA,EAX3B,gCAY6BA,EAZ7B,qCAakCA,EAblC,8BAc2BA,EAd3B,6BAe0BA,EAf1B,oCAgBiCA,EAhBjC,qCAiBkCA,EAjBlC,kCAkB+BA,EAlB/B,oCAmBiCA,EAnBjC,oCAoBiCA,EApBjC,oCAqBmCA,EArBnC,6BAsB8BA,EAtB9B,kBA2BZ,IAGEnB,EAAUJ,KAAKC,MAAMC,GAAGuB,KAAKD,GAC7B,MAAOE,GAEPvB,EAAMuB,EAER1B,KAAKqB,SAAS,CAAEjB,UAASD,QAM3BwB,cAAa,QAAEC,EAAF,OAAWC,IACtB,OACE,+BACE,+BACE,4BACGD,EAAQE,IAAIC,GACX,4BAAKA,MAKX,+BACGF,EAAOC,IAAIE,GACV,4BACGA,EAAIF,IAAIG,GACP,4BAAKA,QASnBC,SAAU,IAAD,EACoBlC,KAAKC,MAA1BC,EADC,EACDA,GAAIC,EADH,EACGA,IAAKC,EADR,EACQA,QACf,OAAKF,EAEH,yBAAKiC,UAAU,OAEb,8CAEA,8BACEC,SAAUV,GAAK1B,KAAKoB,OAAOM,EAAEW,OAAOJ,OACpCK,aAAa,UAGf,yBAAKH,UAAU,UAAUhC,GAAO,IAAIoC,YAEpC,6BAAMnC,EACFA,EAAQ0B,IAAI9B,KAAK2B,cACjB,KAfQ,4CC9FpB,MAAMa,EAAcC,SAASC,eAAe,QAC5CC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFJ,K","file":"static/js/main.7fa32341.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { db: null, err: null, results: null }\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    const me = this;\n    Promise.all([initSqlJs(), fetch('articles.sqlite')]).then(async res => {\n      const SQLite = res[0], dbStorage = res[1];\n      const db = new SQLite.Database(new Uint8Array(await dbStorage.arrayBuffer()));\n\n      setTimeout(() => this.search('Damen'))\n\n      me.setState({db: db});\n    }).catch(err => {\n      me.setState({err});\n    });\n\n  }\n\n  search(query) {\n    let results = null, err = null;\n    const sql = \"SELECT t.* FROM db_articles t \" +\n                \"WHERE internal_article_id LIKE '%\"+query+\"%' \" +\n                \"OR ean_code LIKE  '%\"+query+\"%' \" +\n                // \"OR company_id LIKE  '%\"+query+\"%' \" +\n                \"OR brand LIKE  '%\"+query+\"%' \" +\n                \"OR user_group LIKE  '%\"+query+\"%' \" +\n                \"OR article_type LIKE  '%\"+query+\"%' \" +\n                \"OR line LIKE  '%\"+query+\"%' \" +\n                \"OR frame_dbl LIKE  '%\"+query+\"%' \" +\n                \"OR frame_rim_type LIKE  '%\"+query+\"%' \" +\n                \"OR frame_rx LIKE  '%\"+query+\"%' \" +\n                \"OR frame_colour LIKE  '%\"+query+\"%' \" +\n                \"OR frame_material LIKE  '%\"+query+\"%' \" +\n                \"OR frame_material_type LIKE  '%\"+query+\"%' \" +\n                \"OR frame_height LIKE  '%\"+query+\"%' \" +\n                \"OR frame_width LIKE  '%\"+query+\"%' \" +\n                \"OR frame_spring_hinge LIKE  '%\"+query+\"%' \" +\n                \"OR frame_temple_length LIKE  '%\"+query+\"%' \" +\n                \"OR frame_shape_type LIKE  '%\"+query+\"%' \" +\n                \"OR frame_shape_height LIKE  '%\"+query+\"%' \" +\n                \"OR frame_shape_length LIKE  '%\"+query+\"%' \" +\n                \"OR lens_material_type LIKE  '%\" + query + \"%' \"\n                + \"OR lens_colour LIKE  '%\" + query + \"%' \"\n                // + \"OR image_medium_url LIKE  '%\" + query + \"%' \"\n                // + \"OR delivery_range_index LIKE  '%\" + query + \"%' \"\n                + \"LIMIT 100;  \"\n\n    try {\n      // The sql is executed synchronously on the UI thread. \n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e\n    }\n    this.setState({ results, err })\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {columns.map(columnName =>\n              <td>{columnName}</td>\n            )}\n          </tr>\n        </thead>\n\n        <tbody>\n          {values.map(row => // values is an array of arrays representing the results of the query\n            <tr>\n              {row.map(value =>\n                <td>{value}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let { db, err, results } = this.state;\n    if (!db) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n\n        <h1>Search eyewear</h1>\n\n        <textarea\n          onChange={e => this.search(e.target.value)}\n          defaultValue=\"Damen\"\n        />\n\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n\n        <pre>{results\n          ? results.map(this.renderResult) // results contains one object per select statement in the query\n          : \"\"\n        }</pre>\n\n      </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}