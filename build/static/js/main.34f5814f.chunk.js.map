{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","super","this","state","db","err","results","componentDidMount","me","Promise","all","initSqlJs","axios","get","responseType","then","res","SQLite","dbStorage","Database","Uint8Array","data","setState","catch","exec","sql","e","renderResult","columns","values","map","columnName","row","value","render","className","onChange","target","placeholder","toString","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"scAKe,MAAMA,UAAYC,IAAMC,UAErCC,cACEC,QACAC,KAAKC,MAAQ,CAAEC,GAAI,KAAMC,IAAK,KAAMC,QAAS,MAG/CC,oBAKE,MAAMC,EAAKN,KACXO,QAAQC,IAAI,CAACC,MAAaC,IAAMC,IAAI,YAAa,CAACC,aAAc,kBAAkBC,KAAKC,IACrF,MAAMC,EAASD,EAAI,GAAIE,EAAYF,EAAI,GACjCZ,EAAK,IAAIa,EAAOE,SAAS,IAAIC,WAAWF,EAAUG,OAIxDb,EAAGc,SAAS,CAAClB,GAAIA,MAEhBmB,MAAMlB,IACPG,EAAGc,SAAS,CAACjB,UAKjBmB,KAAKC,GACH,IAAInB,EAAU,KAAMD,EAAM,KAC1B,IAGEC,EAAUJ,KAAKC,MAAMC,GAAGoB,KAAKC,GAC7B,MAAOC,GAEPrB,EAAMqB,EAERxB,KAAKoB,SAAS,CAAEhB,UAASD,QAM3BsB,cAAa,QAAEC,EAAF,OAAWC,IACtB,OACE,+BACE,+BACE,4BACGD,EAAQE,IAAIC,GACX,4BAAKA,MAKX,+BACGF,EAAOC,IAAIE,GACV,4BACGA,EAAIF,IAAIG,GACP,4BAAKA,QASnBC,SAAU,IAAD,EACoBhC,KAAKC,MAA1BC,EADC,EACDA,GAAIC,EADH,EACGA,IAAKC,EADR,EACQA,QACf,OAAKF,EAEH,yBAAK+B,UAAU,OAEb,qDAEA,8BACEC,SAAUV,GAAKxB,KAAKsB,KAAKE,EAAEW,OAAOJ,OAClCK,YAAY,2EAFd,oCAKA,yBAAKH,UAAU,UAAU9B,GAAO,IAAIkC,YAEpC,6BAAMjC,EACFA,EAAQwB,IAAI5B,KAAKyB,cACjB,KAfQ,4CCrEpB,MAAMa,EAAcC,SAASC,eAAe,QAC5CC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFJ,K","file":"static/js/main.34f5814f.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = { db: null, err: null, results: null }\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    const me = this;\n    Promise.all([initSqlJs(), axios.get('./test.db', {responseType: 'arraybuffer'})]).then(res => {\n      const SQLite = res[0], dbStorage = res[1];\n      const db = new SQLite.Database(new Uint8Array(dbStorage.data));\n      // language=SQLite\n      // const rows = db.exec(\"SELECT count(*) FROM db_articles\");\n      // console.log(rows);\n      me.setState({db: db});\n\n    }).catch(err => {\n      me.setState({err});\n    });\n\n  }\n\n  exec(sql) {\n    let results = null, err = null;\n    try {\n      // The sql is executed synchronously on the UI thread. \n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e\n    }\n    this.setState({ results, err })\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {columns.map(columnName =>\n              <td>{columnName}</td>\n            )}\n          </tr>\n        </thead>\n\n        <tbody>\n          {values.map(row => // values is an array of arrays representing the results of the query\n            <tr>\n              {row.map(value =>\n                <td>{value}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let { db, err, results } = this.state;\n    if (!db) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n\n        <h1>React SQL interpreter</h1>\n\n        <textarea\n          onChange={e => this.exec(e.target.value)}\n          placeholder=\"Enter some SQL. No inpiration ? Try “select sqlite_version()”\"\n        >SELECT count(*) FROM db_articles</textarea>\n\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n\n        <pre>{results\n          ? results.map(this.renderResult) // results contains one object per select statement in the query\n          : \"\"\n        }</pre>\n\n      </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}